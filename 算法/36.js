/**
 * @author caijianjia
 * @date 2021-09-17 09:42
 */
// 36. 有效的数独
// 请你判断一个 9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
//
// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
// 数独部分空格内已填入了数字，空白格用 '.' 表示。
//
// 注意：
//
// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。
//  
//
// 示例 1：
//
//
// 输入：board =
//     [["5","3",".",".","7",".",".",".","."]
//         ,["6",".",".","1","9","5",".",".","."]
//         ,[".","9","8",".",".",".",".","6","."]
//         ,["8",".",".",".","6",".",".",".","3"]
//         ,["4",".",".","8",".","3",".",".","1"]
//         ,["7",".",".",".","2",".",".",".","6"]
//         ,[".","6",".",".",".",".","2","8","."]
//         ,[".",".",".","4","1","9",".",".","5"]
//         ,[".",".",".",".","8",".",".","7","9"]]
// 输出：true
// 示例 2：
//
// 输入：board =
//     [["8","3",".",".","7",".",".",".","."]
//         ,["6",".",".","1","9","5",".",".","."]
//         ,[".","9","8",".",".",".",".","6","."]
//         ,["8",".",".",".","6",".",".",".","3"]
//         ,["4",".",".","8",".","3",".",".","1"]
//         ,["7",".",".",".","2",".",".",".","6"]
//         ,[".","6",".",".",".",".","2","8","."]
//         ,[".",".",".","4","1","9",".",".","5"]
//         ,[".",".",".",".","8",".",".","7","9"]]
// 输出：false
// 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
//  
//
// 提示：
//
// board.length == 9
// board[i].length == 9
// board[i][j] 是一位数字或者 '.'

/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function(board) {
    const [height, width] = [board.length, board[0].length]
    const has = (i, j, h, w) =>{
        let k = i, q = j, columns = {}, blocks = {}
        for(; k < h; k++){
            const obj = {}
            for(q = 0; q < w; q++){
                if(board[k][q]!=='.') {
                    // 判断行是否有重复
                    if (!obj[board[k][q]]) {
                        obj[board[k][q]] = true
                    } else {
                        console.log(1, board[k][q])
                        return false
                    }

                    // 判断列是否有重复
                    if(!columns[q]) columns[q] = {}
                    if (!columns[q][board[k][q]]) {
                        columns[q][board[k][q]] = true
                    } else {
                        console.log(2, board[k][q])
                        return false
                    }

                    // 判断块是否重复
                    const g = (Math.ceil((k + 1) / 3.0) - 1) * 3 + Math.ceil((q + 1)  / 3.0)
                    console.log(0, g, [board[k][q]])
                    if(!blocks[g]) blocks[g] = {}
                    if (!blocks[g][board[k][q]]) {
                        blocks[g][board[k][q]] = true
                    } else {
                        console.log(3, k, q, board[k][q])
                        return false
                    }
                }
            }
        }
        return true
    }
    // 检查行 或 列
    if(!has(0, 0, height, width)) {
        console.log(2)
        return false
    }
    return true
};

// const board = [["5","3",".",".","7",".",".",".","."]
//               ,["6",".",".","1","9","5",".",".","."]
//               ,[".","9","8",".",".",".",".","6","."]
//               ,["8",".",".",".","6",".",".",".","3"]
//               ,["4",".",".","8",".","3",".",".","1"]
//               ,["7",".",".",".","2",".",".",".","6"]
//               ,[".","6",".",".",".",".","2","8","."]
//               ,[".",".",".","4","1","9",".",".","5"]
//               ,[".",".",".",".","8",".",".","7","9"]]
// const board = [["8","3",".",".","7",".",".",".","."]
//               ,["6",".",".","1","9","5",".",".","."]
//               ,[".","9","8",".",".",".",".","6","."]
//               ,["8",".",".",".","6",".",".",".","3"]
//               ,["4",".",".","8",".","3",".",".","1"]
//               ,["7",".",".",".","2",".",".",".","6"]
//               ,[".","6",".",".",".",".","2","8","."]
//               ,[".",".",".","4","1","9",".",".","5"]
//               ,[".",".",".",".","8",".",".","7","9"]]
const board = [
    [".",".","5",".",".",".",".",".","6"],
    [".",".",".",".","1","4",".",".","."],
    [".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".","9","2",".","."],
    ["5",".",".",".",".","2",".",".","."],
    [".",".",".",".",".",".",".","3","."],
    [".",".",".","5","4",".",".",".","."],
    ["3",".",".",".",".",".","4","2","."],
    [".",".",".","2","7",".","6",".","."]]

console.log(isValidSudoku(board))
